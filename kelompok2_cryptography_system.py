# -*- coding: utf-8 -*-
"""Kelompok2_Cryptography System

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eDBWLz3GVfsd-AORHbuL4W9Hcqtv-B_R
"""

import hashlib

class SistemKriptoQuadXOR:
    def __init__(self, kunci_rahasia):
        # Menghasilkan kunci 256-bit dari kunci_rahasia menggunakan SHA-256
        self.kunci_rahasia = kunci_rahasia
        self.kunci = self.hasilkan_kunci(kunci_rahasia)

    def hasilkan_kunci(self, kunci_rahasia):
        # Menggunakan hash SHA-256 dari kunci_rahasia untuk mendapatkan string biner 256-bit
        hash_kunci = hashlib.sha256(kunci_rahasia.encode()).hexdigest()
        kunci_biner = bin(int(hash_kunci, 16))[2:].zfill(256)

        # Memisahkan kunci 256-bit menjadi empat bagian 64-bit: B1, B2, B3, B4
        B1 = kunci_biner[:64]
        B2 = kunci_biner[64:128]
        B3 = kunci_biner[128:192]
        B4 = kunci_biner[192:]

        return B1, B2, B3, B4

    def xor_biner(self, str_biner1, str_biner2):
        # XOR dua string biner dan mengembalikan hasilnya
        return ''.join(['1' if x != y else '0' for x, y in zip(str_biner1, str_biner2)])

    def enkripsi(self, plaintext):
        B1, B2, B3, B4 = self.kunci
        teks_sandi = []

        # Mengambil setiap karakter dari kunci rahasia dan mengenkripsi
        for i, huruf in enumerate(plaintext):
            A = format(ord(huruf), '08b')  # Mengubah setiap huruf menjadi biner 8-bit
            print("===============", A)

            # Menerapkan aturan enkripsi per huruf, menggunakan lebih banyak bit dari kunci
            C = self.xor_biner(A.zfill(8), B1[(i % 64):(i % 64) + 8])
            print(C)  # Gunakan bagian yang berbeda dari B1
            C = self.xor_biner(C, B2[(i % 64):(i % 64) + 8])
            print(C)         # Gunakan bagian yang berbeda dari B2
            C = self.xor_biner(C, B3[(i % 64):(i % 64) + 8])
            print(C)         # Gunakan bagian yang berbeda dari B3
            C = self.xor_biner(C, B4[(i % 64):(i % 64) + 8])
            print(C)         # Gunakan bagian yang berbeda dari B4

            # Mengonversi hasil biner menjadi karakter ASCII
            teks_sandi.append(chr(int(C, 2)))


        return ''.join(teks_sandi)  # Mengembalikan teks sandi sebagai string karakter

    def dekripsi(self, chipertext):
        B1, B2, B3, B4 = self.kunci
        teks_asli = ""

        # Memproses setiap karakter terenkripsi
        for i, huruf in enumerate(chipertext):
            C = format(ord(huruf), '08b')  # Mengubah setiap huruf terenkripsi menjadi biner 8-bit
            print("===============", C)  # Menampilkan biner dari karakter terenkripsi

            # Menerapkan aturan dekripsi: A = ((((C ^ B4) ^ B3) ^ B2) ^ B1)
            A = self.xor_biner(C, B4[(i % 64):(i % 64) + 8])           # Gunakan bagian yang berbeda dari B4
            print(A)  # Menampilkan hasil XOR dengan B4
            A = self.xor_biner(A, B3[(i % 64):(i % 64) + 8])           # Gunakan bagian yang berbeda dari B3
            print(A)  # Menampilkan hasil XOR dengan B3
            A = self.xor_biner(A, B2[(i % 64):(i % 64) + 8])           # Gunakan bagian yang berbeda dari B2
            print(A)  # Menampilkan hasil XOR dengan B2
            A = self.xor_biner(A, B1[(i % 64):(i % 64) + 8])           # Gunakan bagian yang berbeda dari B1
            print(A)  # Menampilkan hasil XOR dengan B1

            # Mengubah biner kembali menjadi karakter ASCII
            teks_asli += chr(int(A, 2))

        return teks_asli

# Inisialisasi sistem kriptografi dengan kunci rahasia
sistem_kripto = SistemKriptoQuadXOR("sukabelajardiskrit")

# Menampilkan kunci yang dihasilkan
print("Kunci yang dihasilkan (B1, B2, B3, B4):", sistem_kripto.kunci)

# Enkripsi teks asli
plaintext = "halo"
ct = sistem_kripto.enkripsi(plaintext)

# Dekripsi ciphertext
decrypted_text = sistem_kripto.dekripsi(ct)

print("Ciphertext:", ct)
print("Decrypted text:", decrypted_text)